// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chat.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const insertAdminDevChat = `-- name: InsertAdminDevChat :exec
INSERT INTO chatDevAd (adminID, developerID, sender, message, timesent) 
VALUES (?, ?, ?, ?, NOW())
`

type InsertAdminDevChatParams struct {
	Adminid     int32  `json:"adminid"`
	Developerid int32  `json:"developerid"`
	Sender      string `json:"sender"`
	Message     string `json:"message"`
}

func (q *Queries) InsertAdminDevChat(ctx context.Context, arg InsertAdminDevChatParams) error {
	_, err := q.db.ExecContext(ctx, insertAdminDevChat,
		arg.Adminid,
		arg.Developerid,
		arg.Sender,
		arg.Message,
	)
	return err
}

const listAdminDevChat = `-- name: ListAdminDevChat :many
SELECT message, sender, timesent FROM chatDevAd 
WHERE adminID = ? AND developerID = ?
`

type ListAdminDevChatParams struct {
	Adminid     int32 `json:"adminid"`
	Developerid int32 `json:"developerid"`
}

type ListAdminDevChatRow struct {
	Message  string    `json:"message"`
	Sender   string    `json:"sender"`
	Timesent time.Time `json:"timesent"`
}

func (q *Queries) ListAdminDevChat(ctx context.Context, arg ListAdminDevChatParams) ([]ListAdminDevChatRow, error) {
	rows, err := q.db.QueryContext(ctx, listAdminDevChat, arg.Adminid, arg.Developerid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAdminDevChatRow{}
	for rows.Next() {
		var i ListAdminDevChatRow
		if err := rows.Scan(&i.Message, &i.Sender, &i.Timesent); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInitialAdminChatToDev = `-- name: ListInitialAdminChatToDev :many
SELECT 
    d.developerID AS 'developerID',
    d.fname AS developer_fname, 
    d.lname AS developer_lname, 
    c.message, 
    c.timesent 
FROM developer d 
LEFT JOIN 
    (SELECT 
         developerid, 
         MAX(timesent) AS latest_time
     FROM
         chatDevAd ch
     WHERE ch.adminid=?
     GROUP BY
         developerid, adminid
    ) latest
ON d.developerID = latest.developerID

LEFT JOIN chatDevAd c
ON 
     c.timesent = latest.latest_time
AND c.developerid = latest.developerid
`

type ListInitialAdminChatToDevRow struct {
	Developerid    int32          `json:"developerid"`
	DeveloperFname string         `json:"developer_fname"`
	DeveloperLname string         `json:"developer_lname"`
	Message        sql.NullString `json:"message"`
	Timesent       sql.NullTime   `json:"timesent"`
}

func (q *Queries) ListInitialAdminChatToDev(ctx context.Context, adminid int32) ([]ListInitialAdminChatToDevRow, error) {
	rows, err := q.db.QueryContext(ctx, listInitialAdminChatToDev, adminid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListInitialAdminChatToDevRow{}
	for rows.Next() {
		var i ListInitialAdminChatToDevRow
		if err := rows.Scan(
			&i.Developerid,
			&i.DeveloperFname,
			&i.DeveloperLname,
			&i.Message,
			&i.Timesent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInitialDevChatToAdmin = `-- name: ListInitialDevChatToAdmin :many
SELECT 
    a.adminid AS 'adminID',
    a.fname AS admin_fname,
    a.lname AS admin_lname,
    c.message, 
    c.timesent 
FROM admin a
LEFT JOIN 
    (SELECT 
         adminid, 
         MAX(timesent) AS latest_time
     FROM
         chatDevAd ch
     WHERE ch.developerid=?
     GROUP BY
         adminid, developerid
    ) latest
ON a.adminID = latest.adminID
LEFT JOIN chatDevAd c
ON 
     c.timesent = latest.latest_time
AND c.adminID = latest.adminID
`

type ListInitialDevChatToAdminRow struct {
	Adminid    int32          `json:"adminid"`
	AdminFname string         `json:"admin_fname"`
	AdminLname string         `json:"admin_lname"`
	Message    sql.NullString `json:"message"`
	Timesent   sql.NullTime   `json:"timesent"`
}

func (q *Queries) ListInitialDevChatToAdmin(ctx context.Context, developerid int32) ([]ListInitialDevChatToAdminRow, error) {
	rows, err := q.db.QueryContext(ctx, listInitialDevChatToAdmin, developerid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListInitialDevChatToAdminRow{}
	for rows.Next() {
		var i ListInitialDevChatToAdminRow
		if err := rows.Scan(
			&i.Adminid,
			&i.AdminFname,
			&i.AdminLname,
			&i.Message,
			&i.Timesent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
