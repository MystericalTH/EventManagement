// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: chat.sql

package db

import (
	"context"
	"database/sql"
)

const insertChat = `-- name: InsertChat :exec
INSERT INTO chatDevAd (adminID, developerID, message, datetime) 
VALUES (?, ?, ?, NOW())
`

type InsertChatParams struct {
	Adminid     sql.NullInt32 `json:"adminid"`
	Developerid sql.NullInt32 `json:"developerid"`
	Message     string        `json:"message"`
}

func (q *Queries) InsertChat(ctx context.Context, arg InsertChatParams) error {
	_, err := q.db.ExecContext(ctx, insertChat, arg.Adminid, arg.Developerid, arg.Message)
	return err
}

const listChat = `-- name: ListChat :many
SELECT messageid, adminid, developerid, message, datetime FROM chatDevAd
`

func (q *Queries) ListChat(ctx context.Context) ([]Chatdevad, error) {
	rows, err := q.db.QueryContext(ctx, listChat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chatdevad
	for rows.Next() {
		var i Chatdevad
		if err := rows.Scan(
			&i.Messageid,
			&i.Adminid,
			&i.Developerid,
			&i.Message,
			&i.Datetime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
