// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: registration.sql

package db

import (
	"context"
)

const getRegistrationStatus = `-- name: GetRegistrationStatus :one
SELECT COUNT(*) > 0 AS is_registered
FROM ActivityRegistration
WHERE activityID = ? AND memberID = ?
`

type GetRegistrationStatusParams struct {
	Activityid int32 `json:"activityid"`
	Memberid   int32 `json:"memberid"`
}

func (q *Queries) GetRegistrationStatus(ctx context.Context, arg GetRegistrationStatusParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, getRegistrationStatus, arg.Activityid, arg.Memberid)
	var is_registered bool
	err := row.Scan(&is_registered)
	return is_registered, err
}

const insertRegistration = `-- name: InsertRegistration :exec
INSERT INTO ActivityRegistration (activityID, memberID, role, expectation, datetime)
VALUES (?, ?, ?, ?, NOW())
`

type InsertRegistrationParams struct {
	Activityid  int32  `json:"activityid"`
	Memberid    int32  `json:"memberid"`
	Role        string `json:"role"`
	Expectation string `json:"expectation"`
}

func (q *Queries) InsertRegistration(ctx context.Context, arg InsertRegistrationParams) error {
	_, err := q.db.ExecContext(ctx, insertRegistration,
		arg.Activityid,
		arg.Memberid,
		arg.Role,
		arg.Expectation,
	)
	return err
}

const listActivityRegistration = `-- name: ListActivityRegistration :many
SELECT Member.fname, Member.lname, role, Member.email, Member.phone, expectation
FROM ActivityRegistration
JOIN Member ON ActivityRegistration.memberID = Member.memberID
WHERE activityID = ?
`

type ListActivityRegistrationRow struct {
	Fname       string `json:"fname"`
	Lname       string `json:"lname"`
	Role        string `json:"role"`
	Email       string `json:"email"`
	Phone       string `json:"phone"`
	Expectation string `json:"expectation"`
}

func (q *Queries) ListActivityRegistration(ctx context.Context, activityid int32) ([]ListActivityRegistrationRow, error) {
	rows, err := q.db.QueryContext(ctx, listActivityRegistration, activityid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListActivityRegistrationRow
	for rows.Next() {
		var i ListActivityRegistrationRow
		if err := rows.Scan(
			&i.Fname,
			&i.Lname,
			&i.Role,
			&i.Email,
			&i.Phone,
			&i.Expectation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
