// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feedback.sql

package db

import (
	"context"
)

const createFeedback = `-- name: CreateFeedback :exec
INSERT INTO Feedback (activityID, memberID, feedbackMessage, feedbackDateTime)
VALUES (?, ?, ?, NOW())
`

type CreateFeedbackParams struct {
	Activityid      int32  `json:"activityid"`
	Memberid        int32  `json:"memberid"`
	Feedbackmessage string `json:"feedbackmessage"`
}

func (q *Queries) CreateFeedback(ctx context.Context, arg CreateFeedbackParams) error {
	_, err := q.db.ExecContext(ctx, createFeedback, arg.Activityid, arg.Memberid, arg.Feedbackmessage)
	return err
}

const getFeedbackByID = `-- name: GetFeedbackByID :one
SELECT feedbackID, activityID, memberID, feedbackMessage, feedbackDateTime
FROM Feedback
WHERE feedbackID = ?
`

func (q *Queries) GetFeedbackByID(ctx context.Context, feedbackid int32) (Feedback, error) {
	row := q.db.QueryRowContext(ctx, getFeedbackByID, feedbackid)
	var i Feedback
	err := row.Scan(
		&i.Feedbackid,
		&i.Activityid,
		&i.Memberid,
		&i.Feedbackmessage,
		&i.Feedbackdatetime,
	)
	return i, err
}

const hasSubmittedFeedback = `-- name: HasSubmittedFeedback :one
SELECT COUNT(*) > 0 FROM Feedback WHERE activityID = ? AND memberID = ?
`

type HasSubmittedFeedbackParams struct {
	Activityid int32 `json:"activityid"`
	Memberid   int32 `json:"memberid"`
}

func (q *Queries) HasSubmittedFeedback(ctx context.Context, arg HasSubmittedFeedbackParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, hasSubmittedFeedback, arg.Activityid, arg.Memberid)
	var column_1 bool
	err := row.Scan(&column_1)
	return column_1, err
}

const listFeedbacks = `-- name: ListFeedbacks :many
SELECT feedbackID, activityID, memberID, feedbackMessage, feedbackDateTime
FROM Feedback
`

func (q *Queries) ListFeedbacks(ctx context.Context) ([]Feedback, error) {
	rows, err := q.db.QueryContext(ctx, listFeedbacks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feedback
	for rows.Next() {
		var i Feedback
		if err := rows.Scan(
			&i.Feedbackid,
			&i.Activityid,
			&i.Memberid,
			&i.Feedbackmessage,
			&i.Feedbackdatetime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
